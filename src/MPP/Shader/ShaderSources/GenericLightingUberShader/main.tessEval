//Tesselation evaluation shader template

{% include  "00_Generic_Common_VersionTag.glsl" %}
{% include  "01_Generic_Common_precisionTag.glsl" %}

//layout(triangles, equal_spacing, cw) in;
layout(triangles, equal_spacing, ccw) in;


//---- shader interface ----------------------
//input from vertex/tessEval shader
in InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
} input[];
//output to fragment shader
out InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
} output;
//--------------------------------------------


//in vec3 tcPosition[];
//out vec3 tePosition;
//out vec3 tePatchDistance;
//uniform mat4 Projection;
//uniform mat4 Modelview;

void main()
{    
  //------------ following barycentric weighted output of vertex shader-computed variables ---------
  
  #define BARYCENTRIC_WEIGHTED(var) gl_TessCoord.x * input[0].var + gl_TessCoord.y * input[1].var + gl_TessCoord.z * input[2].var
  
  gl_Position = BARYCENTRIC_WEIGHTED(gl_Position);
  
  {% if RENDERING_TECHNIQUE_DEFAULT_LIGHTING or RENDERING_TECHNIQUE_TRANSPARENT_OBJECT_LIGHTING  or RENDERING_TECHNIQUE_DEFERRED_GBUFFER_FILL %}
    output.position =   BARYCENTRIC_WEIGHTED(position);
    output.normal =     BARYCENTRIC_WEIGHTED(normal);
    {% if SHADING_FEATURE_NORMAL_MAPPING %}
      output.tangent =  BARYCENTRIC_WEIGHTED(tangent);
    {% endif %}
    {% if SHADING_FEATURE_DECAL_TEXTURING or SHADING_FEATURE_NORMAL_MAPPING or SHADING_FEATURE_DETAIL_TEXTURING	%}
      output.texCoords = BARYCENTRIC_WEIGHTED(texCoords);
    {%endif%}
    {% if SHADOW_FEATURE_EXPERIMENTAL_SHADOWCOORD_CALC_IN_FRAGMENT_SHADER and LIGHT_SOURCES_SHADOW_FEATURE_ONE_SPOT_LIGHT %}
      output.shadowCoord = BARYCENTRIC_WEIGHTED(shadowCoord);
    {% endif %}
  {% endif %}
  {% if RENDERING_TECHNIQUE_SHADOWMAP_GENERATION or RENDERING_TECHNIQUE_POSITION_IMAGE_GENERATION or RENDERING_TECHNIQUE_DEPTH_IMAGE_GENERATION  %}
    {% if RENDERING_TECHNIQUE_SHADOWMAP_GENERATION or RENDERING_TECHNIQUE_DEPTH_IMAGE_GENERATION %} {% if LIGHT_SOURCES_SHADOW_FEATURE_ONE_POINT_LIGHT or RENDERING_TECHNIQUE_DEPTH_IMAGE_GENERATION %}
        //output.depthViewSpaceNORMALIZED = BARYCENTRIC_WEIGHTED(depthViewSpaceNORMALIZED);
        //output.depthViewSpaceUNSCALED = BARYCENTRIC_WEIGHTED(depthViewSpaceUNSCALED);
        //output.positionViewSpaceNORMALIZED = BARYCENTRIC_WEIGHTED(positionViewSpaceNORMALIZED);
        output.positionViewSpaceUNSCALED = BARYCENTRIC_WEIGHTED(positionViewSpaceUNSCALED);
    {% endif %} {% endif %}       
    {% if RENDERING_TECHNIQUE_POSITION_IMAGE_GENERATION %}  
      output.position = BARYCENTRIC_WEIGHTED(position);
    {% endif %}    
    {%comment%} for default spotlight shadowmap generation, there is no fragment shader necessary at all, hence no input variable {%endcomment%}
  {% endif %}
  {% if instancedRendering %}
    output.uniqueInstanceID = BARYCENTRIC_WEIGHTED(uniqueInstanceID);
  {% endif %}
  {% if RENDERING_TECHNIQUE_PRIMITIVE_ID_RASTERIZATION %}
    output.genericIndices = BARYCENTRIC_WEIGHTED(genericIndices);
  {% endif %}
    
}
